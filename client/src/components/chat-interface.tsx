import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { MdSend, MdSettings, MdBarChart } from "react-icons/md";
import { FaRobot } from "react-icons/fa";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface ChatMessage {
  id: string;
  message: string;
  response?: string;
  createdAt: Date;
}

interface ChatInterfaceProps {
  language?: 'en' | 'fr';
  onMessageSend?: (message: string) => void;
  customActions?: Array<{
    label: string;
    icon?: React.ReactNode;
    onClick: () => void;
  }>;
  transparent?: boolean;
}

export default function ChatInterface({ 
  language = 'fr', 
  onMessageSend,
  customActions = [],
  transparent = false
}: ChatInterfaceProps) {
  const [message, setMessage] = useState("");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: messages = [] } = useQuery<ChatMessage[]>({
    queryKey: ["/api/chat"],
  });

  // RAG Knowledge Base
  const getAitendersResponse = (question: string): string => {
    const knowledgeBase = {
      fr: {
        security: {
          keywords: ["s√©curit√©", "security", "donn√©es", "rgpd", "gdpr", "protection", "chiffrement"],
          response: "üõ°Ô∏è **S√©curit√© by Design chez Aitenders**\n\n‚Ä¢ **Chiffrement end-to-end** : Toutes vos donn√©es sont chiffr√©es en transit et au repos\n‚Ä¢ **Conformit√© RGPD** : Respect strict de la r√©glementation europ√©enne\n‚Ä¢ **H√©bergement s√©curis√©** : Serveurs europ√©ens certifi√©s ISO 27001\n‚Ä¢ **Contr√¥les d'acc√®s granulaires** : Permissions par r√¥le et projet\n‚Ä¢ **Pistes d'audit compl√®tes** : Tra√ßabilit√© de toutes les actions\n‚Ä¢ **Sauvegarde automatique** : Vos donn√©es sont prot√©g√©es en permanence"
        },
        usecases: {
          keywords: ["cas d'usage", "use case", "cas", "usage", "sc√©narios", "fonctionnalit√©s"],
          response: "üìã **Cas d'Usage Aitenders**\n\n**Par Phase :**\n‚Ä¢ **Offre** : Analyse des DCE, extraction d'exigences, estimation des co√ªts\n‚Ä¢ **Ex√©cution** : Suivi des jalons, gestion des risques, pilotage multi-projets\n‚Ä¢ **R√©daction** : G√©n√©ration automatique de r√©ponses, v√©rification conformit√©\n\n**Par Complexit√© :**\n‚Ä¢ **UC1 - Petits projets** : Appels d'offres simples, processus acc√©l√©r√©\n‚Ä¢ **UC3 - Projets complexes** : Multi-lots, coordination √©quipes, conformit√© r√©glementaire\n‚Ä¢ **Gestion portfolio** : Vue d'ensemble, analytics, optimisation ressources"
        },
        roi: {
          keywords: ["roi", "retour", "investissement", "b√©n√©fices", "√©conomies", "gains", "calcul"],
          response: "üí∞ **Retour sur Investissement Aitenders**\n\n**Gains mesurables :**\n‚Ä¢ **-60% temps de pr√©paration** des offres\n‚Ä¢ **+40% taux de succ√®s** aux appels d'offres\n‚Ä¢ **-30% erreurs de conformit√©**\n‚Ä¢ **+25% productivit√© √©quipes**\n\n**Calcul personnalis√© :**\n‚Ä¢ √âconomies en temps : 15-20h/offre r√©cup√©r√©es\n‚Ä¢ Co√ªt moyen √©vit√© : 8-12k‚Ç¨ par erreur non-conformit√©\n‚Ä¢ ROI moyen : 300-450% premi√®re ann√©e\n\n*Demandez une simulation personnalis√©e pour votre organisation*"
        },
        agents: {
          keywords: ["agents", "ia", "ai", "intelligence", "artificielle", "automatisation"],
          response: "ü§ñ **Agents IA Aitenders**\n\n**Agent Analyseur** :\n‚Ä¢ Extraction automatique des exigences techniques\n‚Ä¢ Identification des crit√®res de s√©lection\n‚Ä¢ D√©tection des pi√®ges contractuels\n\n**Agent R√©dacteur** :\n‚Ä¢ G√©n√©ration de r√©ponses personnalis√©es\n‚Ä¢ Adaptation au style et aux contraintes\n‚Ä¢ V√©rification coh√©rence multi-documents\n\n**Agent Conformit√©** :\n‚Ä¢ Contr√¥le r√©glementaire automatis√©\n‚Ä¢ Validation des pi√®ces obligatoires\n‚Ä¢ Alertes risques juridiques"
        },
        contact: {
          keywords: ["contact", "d√©monstration", "demo", "√©quipe", "expert", "aide"],
          response: "üìû **Contactez Notre √âquipe**\n\n**D√©monstration personnalis√©e :**\n‚Ä¢ Session de 30min adapt√©e √† vos besoins\n‚Ä¢ D√©couverte de vos cas d'usage sp√©cifiques\n‚Ä¢ Simulation sur vos documents r√©els\n\n**Expertise m√©tier :**\n‚Ä¢ Consultants sp√©cialis√©s par secteur\n‚Ä¢ +10 ans d'exp√©rience appels d'offres\n‚Ä¢ Accompagnement mise en ≈ìuvre\n\n**Contact :** contact@aitenders.com\n**Planning :** Disponible sous 24h"
        }
      },
      en: {
        security: {
          keywords: ["security", "data", "gdpr", "protection", "encryption"],
          response: "üõ°Ô∏è **Security by Design at Aitenders**\n\n‚Ä¢ **End-to-end encryption**: All data encrypted in transit and at rest\n‚Ä¢ **GDPR compliance**: Strict adherence to European regulations\n‚Ä¢ **Secure hosting**: ISO 27001 certified European servers\n‚Ä¢ **Granular access controls**: Role and project-based permissions\n‚Ä¢ **Complete audit trails**: Full traceability of all actions\n‚Ä¢ **Automatic backup**: Your data is permanently protected"
        },
        usecases: {
          keywords: ["use case", "cases", "scenarios", "features"],
          response: "üìã **Aitenders Use Cases**\n\n**By Phase:**\n‚Ä¢ **Bidding**: DCE analysis, requirements extraction, cost estimation\n‚Ä¢ **Execution**: Milestone tracking, risk management, multi-project control\n‚Ä¢ **Writing**: Automatic response generation, compliance verification\n\n**By Complexity:**\n‚Ä¢ **UC1 - Small projects**: Simple tenders, accelerated process\n‚Ä¢ **UC3 - Complex projects**: Multi-lot, team coordination, regulatory compliance\n‚Ä¢ **Portfolio management**: Overview, analytics, resource optimization"
        }
      }
    };

    const lang = language as keyof typeof knowledgeBase;
    const lowerQuestion = question.toLowerCase();
    
    for (const [category, data] of Object.entries(knowledgeBase[lang])) {
      if (data.keywords.some(keyword => lowerQuestion.includes(keyword))) {
        return data.response;
      }
    }
    
    return language === 'fr' 
      ? "Je peux vous aider avec des questions sur la s√©curit√©, les cas d'usage, le ROI, les agents IA ou pour vous mettre en contact avec notre √©quipe. Reformulez votre question ou utilisez les boutons ci-dessous."
      : "I can help you with questions about security, use cases, ROI, AI agents, or connecting you with our team. Rephrase your question or use the buttons below.";
  };

  const sendMessageMutation = useMutation({
    mutationFn: async (messageText: string) => {
      // Generate intelligent response using RAG
      const aiResponse = getAitendersResponse(messageText);
      
      // Save to backend
      const response = await apiRequest("POST", "/api/chat", { 
        message: messageText,
        response: aiResponse 
      });
      return response.json();
    },
    onSuccess: () => {
      setMessage("");
      queryClient.invalidateQueries({ queryKey: ["/api/chat"] });
      if (onMessageSend) {
        onMessageSend(message);
      }
      toast({
        title: language === 'fr' ? "R√©ponse g√©n√©r√©e" : "Response generated",
        description: language === 'fr' 
          ? "Votre question a √©t√© trait√©e par notre IA."
          : "Your question has been processed by our AI.",
      });
    },
    onError: () => {
      toast({
        title: language === 'fr' ? "Erreur" : "Error",
        description: language === 'fr'
          ? "√âchec de l'envoi du message. Veuillez r√©essayer."
          : "Failed to send message. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleSendMessage = () => {
    if (message.trim()) {
      sendMessageMutation.mutate(message);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Button questions that users would naturally ask
  const getButtonQuestion = (buttonLabel: string) => {
    const questions = {
      fr: {
        "Nos cas d'usage": "Quels sont l'ensemble des cas d'usage disponibles sur Aitenders ?",
        "Nos Cas d'Usage": "Quels sont l'ensemble des cas d'usage disponibles sur Aitenders ?",
        "Simulation / ROI": "Comment calculer le retour sur investissement d'Aitenders pour mon organisation ?",
        "AI Agents": "Comment fonctionnent les agents IA d'Aitenders et que peuvent-ils faire ?",
        "Data Security": "Que fait Aitenders pour la s√©curit√© des donn√©es ?",
        "Contactez nous": "Comment puis-je contacter l'√©quipe Aitenders pour une d√©monstration ?",
        "Demo UC3": "Comment Aitenders g√®re-t-il les appels d'offres complexes multi-lots ?",
        "ROI Calculator": "Quels b√©n√©fices financiers puis-je attendre avec Aitenders ?",
        "Contact Expert": "Comment obtenir l'aide d'un expert en gestion d'appels d'offres ?",
        "Outils": "Quels outils et fonctionnalit√©s propose Aitenders ?"
      },
      en: {
        "Our Use Cases": "What are all the use cases available on Aitenders?",
        "Nos Cas d'Usage": "What are all the use cases available on Aitenders?",
        "Simulation / ROI": "How to calculate the ROI of Aitenders for my organization?",
        "AI Agents": "How do Aitenders AI agents work and what can they do?",
        "Data Security": "What does Aitenders do for data security?",
        "Contact us": "How can I contact the Aitenders team for a demonstration?",
        "Demo UC3": "How does Aitenders handle complex multi-lot tenders?",
        "ROI Calculator": "What financial benefits can I expect with Aitenders?",
        "Contact Expert": "How to get help from a tender management expert?",
        "Tools": "What tools and features does Aitenders offer?"
      }
    };
    
    return questions[language]?.[buttonLabel as keyof typeof questions[typeof language]] || "";
  };

  // Default actions
  const defaultActions = [
    {
      label: language === 'fr' ? "Nos Cas d'Usage" : "Our Use Cases",
      icon: <span className="text-gray-400">+</span>,
      onClick: () => {
        const question = getButtonQuestion(language === 'fr' ? "Nos cas d'usage" : "Our Use Cases");
        setMessage(question);
      }
    },
    {
      label: "Outils",
      icon: <MdSettings className="w-3 h-3 text-gray-400" />,
      onClick: () => {
        const question = getButtonQuestion("Outils");
        setMessage(question);
      }
    }
  ];

  // Enhanced actions with questions
  const enhancedCustomActions = customActions.map(action => ({
    ...action,
    onClick: () => {
      const question = getButtonQuestion(action.label);
      if (question) {
        setMessage(question);
      } else {
        action.onClick();
      }
    }
  }));

  const actions = customActions.length > 0 ? enhancedCustomActions : defaultActions;

  // Format AI response for display
  const formatResponse = (text: string) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\n/g, '<br/>')
      .replace(/‚Ä¢/g, '&bull;');
  };

  return (
    <div className={`fixed bottom-0 left-0 right-0 z-50 ${transparent ? 'bg-transparent' : 'bg-white/95 backdrop-blur-sm border-t border-gray-200 shadow-2xl'}`}>
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white border border-gray-300 rounded-3xl shadow-lg p-4">
          {/* Recent Messages Display */}
          {messages.length > 0 && (
            <div className="mb-4 max-h-40 overflow-y-auto space-y-2">
              {messages.slice(-2).map((msg) => (
                <div key={msg.id} className="space-y-2">
                  <div className="text-right">
                    <div className="inline-block bg-aitenders-primary-blue text-white px-3 py-2 rounded-2xl rounded-tr-sm text-sm max-w-xs">
                      {msg.message}
                    </div>
                  </div>
                  {msg.response && (
                    <div className="text-left">
                      <div className="inline-block bg-aitenders-pale-blue text-aitenders-dark-blue px-3 py-2 rounded-2xl rounded-tl-sm text-sm max-w-md">
                        <div 
                          dangerouslySetInnerHTML={{ 
                            __html: formatResponse(msg.response) 
                          }} 
                        />
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
          
          {/* Input Field */}
          <div className="flex items-start gap-3 mb-3">
            <Input
              type="text"
              placeholder={language === 'fr' ? "Poser une question" : "Ask a question"}
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              className="flex-1 text-base bg-transparent border-0 focus:ring-0 focus:outline-none placeholder:text-gray-500 min-h-[24px]"
              disabled={sendMessageMutation.isPending}
            />
            <Button
              onClick={handleSendMessage}
              disabled={!message.trim() || sendMessageMutation.isPending}
              size="sm"
              className="h-8 w-8 rounded-lg bg-aitenders-primary-blue hover:bg-aitenders-dark-blue text-white shadow-sm transition-all"
            >
              <MdSend className="w-4 h-4" />
            </Button>
          </div>

          {/* Action Buttons Row */}
          <div className="flex items-center justify-between border-t border-gray-200 pt-3">
            {/* Left Side - Main Actions */}
            <div className="flex items-center gap-2">
              {actions.map((action, index) => (
                <Button
                  key={index}
                  variant="ghost"
                  size="sm"
                  onClick={action.onClick}
                  className="h-8 px-3 text-xs text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg flex items-center gap-1"
                >
                  {action.icon}
                  {action.label}
                </Button>
              ))}
            </div>


          </div>
        </div>
      </div>
    </div>
  );
}