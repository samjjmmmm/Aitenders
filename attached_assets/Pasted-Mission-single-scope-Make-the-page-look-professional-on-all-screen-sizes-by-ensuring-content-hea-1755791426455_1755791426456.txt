Mission (single-scope):
Make the page look professional on all screen sizes by ensuring content (headlines, paragraphs, buttons, images, cards) has consistent horizontal breathing room and a sane max width — without narrowing or boxing the background. Background colors/gradients must remain full-bleed. Do not change anything else anywhere in the app (no colors, fonts, sizes, spacing between components, JS behavior, or layout semantics beyond the single wrapper described below).

Why this is needed

On small/medium screens, content currently hugs the viewport edges. On larger screens, a constraint appears inconsistently. The fix is to constrain content, not the section backgrounds. Previously, a max-width was applied to an outer container, which created white bars. We want full-bleed sections with inner content boundaries.

Implementation Plan (minimal, reversible)

Create one content boundary class used to wrap only the inner content, not the section background.

/* Append to the end of the global stylesheet */
.content-boundary {
  max-width: 1200px;                       /* professional line-length on large screens */
  margin-inline: auto;                     /* center horizontally */
  padding-inline: clamp(16px, 4vw, 48px);  /* guaranteed side padding on small/medium */
  box-sizing: border-box;                  /* include padding in total width */
}

/* Optional: a slightly narrower variant for long-form text sections */
.content-boundary--narrow {
  max-width: 960px;
}

/* Escape hatch for specific elements that must span full width inside a section */
.full-bleed {
  margin-inline: calc(50% - 50vw);
  max-width: 100vw;
  padding-inline: 0;
}

/* Safety: media should not overflow the boundary */
.content-boundary img,
.content-boundary video,
.content-boundary canvas,
.content-boundary svg {
  max-width: 100%;
  height: auto;
}


Apply the boundary inside sections (content only).
For each top-level section (e.g., .hero, .features, .benefits, .cta, .footer, or whatever names exist), make sure the background/gradient stays on the outer <section>, and add a single inner wrapper for the content:

<!-- BEFORE (problematic: content touches edges or whole section gets boxed) -->
<section class="hero"> …existing content… </section>

<!-- AFTER (correct: background stays full-bleed; only content is constrained) -->
<section class="hero">
  <div class="content-boundary">
    <!-- keep existing markup here, unchanged -->
    <h1>Découvrez, pilotez et sécurisez chaque clause <span>dès le premier jour.</span></h1>
    <p>La seule plateforme conçue …</p>
    <div class="cta-row">
      <a class="btn btn-primary">Réservez une Démo</a>
      <a class="link">Téléchargez le cas d'usage →</a>
    </div>
  </div>
</section>


Do not wrap the entire <body>, <main>, or the outer <section> with the boundary.

Do not nest multiple .content-boundary elements inside each other. Exactly one per section.

If a section already contains an equivalent wrapper (e.g., .container, .wrapper, .page-width), rename or extend it to use the .content-boundary rules rather than creating duplicates. (Goal: one consistent boundary class everywhere.)

Full-bleed exceptions
If a specific element inside the content must span edge-to-edge (e.g., a decorative image band), add class="full-bleed" to that element only. Do not apply full-bleed to the whole section or the boundary.

Do NOT change:

Typography, font sizes, line-heights, letter-spacing.

Component spacing (margins between cards, tiles, buttons).

Colors, shadows, borders.

JavaScript behavior, event handlers, or data attributes.

Z-index stacks (unless a boundary inadvertently clips something — if so, fix only that element locally).

Breakpoints or media queries beyond what’s introduced by .content-boundary.

Do NOT introduce white bars
Ensure the .content-boundary is inside the section that has the background. The section itself must remain width: 100% so its background continues full-bleed.

Where to apply (search/modify)

hero (top banner with the big headline and gradient)

Any section that contains the product screenshot/card rows

Features/Benefits blocks

Mid-page CTAs

Footer content area

For each, add exactly one .content-boundary as the immediate child that wraps the textual/visual content.

If the project uses a design system (Tailwind/Bootstrap/etc.):

Tailwind: You may map .content-boundary to a utility composition in CSS (don’t refactor to utilities across the codebase).

Bootstrap: If .container already exists, avoid global overrides. Instead, add .content-boundary and apply it where needed, or extend .container locally with .content-boundary only on this page.

Edge Cases & Safeguards

Sticky headers / floating chat widget: Ensure their positioning is unaffected. Do not wrap or reparent them.

Decorative background blobs/gradients: Keep them outside .content-boundary so they remain full-bleed.

Hero image that intentionally bleeds: Place the image inside .content-boundary only if it should be aligned with text; otherwise use .full-bleed on that image.

Nested grids: If a section already has an inner grid wrapper, apply .content-boundary to that wrapper (do not create an extra nesting level that might break grid gaps).

One boundary per section: No double constraints. If you see compounded padding, you added it twice.

Acceptance Criteria (must all pass)

Visual spacing

At 360px, 768px, 1024px widths: No text or buttons touch the viewport edges; there’s clear side padding.

At 1440px and 1920px widths: Content is centered, constrained to ~1200px, with comfortable line lengths.

Backgrounds/gradients remain full-bleed. No white bars left or right.

No regressions

No changes to font sizes, colors, or component spacings.

Buttons, links, and interactive elements behave exactly as before.

Sticky/fixed UI (chat bubble, nav) still aligns correctly.

Code quality

Exactly one .content-boundary per section.

No global overrides on unrelated components.

No unused CSS added.

Deliverables

CSS appended (exact block above).

HTML updates: insert .content-boundary wrappers into the relevant sections on this page only.

Before/after screenshots at 768px and 1440px showing:

Full-bleed background intact

Constrained, padded content

No clipped elements or layout shifts.

Out of scope: Any redesign, typography changes, component rewrites, utility class migrations, or JavaScript edits.

Commit message suggestion:
feat(ui): add content-boundary wrappers for consistent horizontal padding without affecting full-bleed backgrounds

Quick checklist for you (the agent)

 Backgrounds still span 100% width.

 Content sits inside .content-boundary.

 No duplicate boundaries.

 No side white bars on any section.

 Works at 360/768/1024/1440/1920 px.