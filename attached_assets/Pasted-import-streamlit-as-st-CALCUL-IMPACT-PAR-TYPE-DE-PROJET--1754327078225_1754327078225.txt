import streamlit as st

# -----------------------------
# CALCUL IMPACT PAR TYPE DE PROJET
# -----------------------------
def calcul_par_projet(taille, nb_projets, montant_projet, cout_jh=600):
    if taille == "Petit":
        duree_offre, nb_personnes = 3, 1.5
        repartition = {"Analyse": 0.20, "Prix": 0.50, "Ecriture": 0.30}
        effort_realisation, gain_collab, gain_tracabilite, gain_conformite_pct = 36, 0.70, 0.65, 0.05

    elif taille == "Moyen":
        duree_offre, nb_personnes = 12, 3.5
        repartition = {"Analyse": 0.30, "Prix": 0.30, "Ecriture": 0.40}
        effort_realisation, gain_collab, gain_tracabilite, gain_conformite_pct = 144, 0.85, 0.75, 0.007

    else:  # Grand
        duree_offre, nb_personnes = 48, 15
        repartition = {"Analyse": 0.40, "Prix": 0.20, "Ecriture": 0.40}
        effort_realisation, gain_collab, gain_tracabilite, gain_conformite_pct = 2000, 0.95, 0.80, 0.02

    # Phase Offre
    temps_total_offre = duree_offre * nb_personnes * 5
    cout_offre_base = temps_total_offre * cout_jh
    gain_analyse = temps_total_offre * repartition["Analyse"] * 0.50
    gain_prix = temps_total_offre * repartition["Prix"] * 0.30
    gain_ecriture = temps_total_offre * repartition["Ecriture"] * 0.40
    gain_total_offre = gain_analyse + gain_prix + gain_ecriture
    economies_offre = gain_total_offre * cout_jh
    cout_avec_aitenders = cout_offre_base - economies_offre
    roi_offre = round(cout_offre_base / max(cout_avec_aitenders, 1), 1)

    # R√©alisation
    cout_realisation_base = effort_realisation * cout_jh
    economies_realisation = cout_realisation_base * gain_collab

    # Tra√ßabilit√©
    gain_tracabilite_jh = temps_total_offre * gain_tracabilite
    economies_tracabilite = gain_tracabilite_jh * cout_jh

    # Conformit√©
    economies_conformite = montant_projet * gain_conformite_pct

    # Totaux
    economies_totales = economies_offre + economies_realisation + economies_tracabilite + economies_conformite
    economies_annuelles = economies_totales * nb_projets

    return {
        "ROI": roi_offre,
        "WOW1": gain_analyse * cout_jh,
        "WOW2": gain_prix * cout_jh + economies_realisation,
        "WOW3": gain_ecriture * cout_jh,
        "Collaboration": economies_realisation,
        "Tracabilite": economies_tracabilite,
        "Conformite": economies_conformite,
        "Total_Par_Projet": economies_totales,
        "Total_Annuel": economies_annuelles
    }

# -----------------------------
# INTERFACE STREAMLIT
# -----------------------------
st.set_page_config(page_title="Simulateur One Voice", layout="wide")

st.title("üìä Simulateur One Voice Aitenders")
st.write("Calculez l'impact global d‚ÄôAitenders sur votre portefeuille projets.")

# Inputs utilisateur
col1, col2 = st.columns(2)

with col1:
    nb_petits = st.number_input("Nombre de petits projets (‚âà3 semaines, 1 pers.)", min_value=0, value=0)
    montant_petit = st.number_input("Montant moyen d‚Äôun petit projet (‚Ç¨)", min_value=1000000, value=5000000, step=1000000)

    nb_moyens = st.number_input("Nombre de projets moyens (1-3 mois, 2-5 pers.)", min_value=0, value=0)
    montant_moyen = st.number_input("Montant moyen d‚Äôun projet moyen (‚Ç¨)", min_value=1000000, value=50000000, step=5000000)

with col2:
    nb_grands = st.number_input("Nombre de grands projets (>6 mois, 15 pers.+)", min_value=0, value=0)
    montant_grand = st.number_input("Montant moyen d‚Äôun grand projet (‚Ç¨)", min_value=50000000, value=100000000, step=10000000)

    email = st.text_input("Votre email (obligatoire pour voir le d√©tail)")

# Calculs par taille
res_petits = calcul_par_projet("Petit", nb_petits, montant_petit)
res_moyens = calcul_par_projet("Moyen", nb_moyens, montant_moyen)
res_grands = calcul_par_projet("Grand", nb_grands, montant_grand)

# Consolidation
total_annuel = res_petits["Total_Annuel"] + res_moyens["Total_Annuel"] + res_grands["Total_Annuel"]
roi_global = round((res_petits["ROI"] + res_moyens["ROI"] + res_grands["ROI"]) / max((bool(nb_petits) + bool(nb_moyens) + bool(nb_grands)), 1), 1)

# Teaser visible
st.subheader("üîç Aper√ßu imm√©diat")
st.metric("ROI Productivit√© global", f"{roi_global}x")
st.metric("√âconomie annuelle estim√©e", f"{total_annuel:,.0f} ‚Ç¨")
st.progress(min(total_annuel / 1_000_000_000, 1.0))

# R√©sultats d√©taill√©s apr√®s email
if email:
    st.success("‚úÖ Merci, voici vos r√©sultats d√©taill√©s !")

    st.subheader("üåç WOW1 ‚Äì Structuration IA & Analyse")
    st.write(f"- Gain total : {res_petits['WOW1'] + res_moyens['WOW1'] + res_grands['WOW1']:,.0f} ‚Ç¨")
    st.write("**Impacts :** Productivit√© (JH gagn√©s), Tra√ßabilit√© (exigences couvertes), S√©curisation du d√©marrage.")

    st.subheader("ü§ù WOW2 ‚Äì Collaboration & Pilotage")
    st.write(f"- Gain total : {res_petits['WOW2'] + res_moyens['WOW2'] + res_grands['WOW2']:,.0f} ‚Ç¨")
    st.write("**Impacts :** Collaboration (+70% √† +95%), versions g√©r√©es, arbitrages acc√©l√©r√©s.")

    st.subheader("üìù WOW3 ‚Äì √âcriture & Validation")
    st.write(f"- Gain total : {res_petits['WOW3'] + res_moyens['WOW3'] + res_grands['WOW3']:,.0f} ‚Ç¨")
    st.write("**Impacts :** R√©daction guid√©e, justifications automatiques, r√©duction du risque contractuel.")

    st.subheader("üìå Synth√®se Consolid√©e")
    st.write(f"- √âconomie totale annuelle : {total_annuel:,.0f} ‚Ç¨")
else:
    st.warning("‚ö†Ô∏è Entrez votre email pour d√©bloquer le d√©tail des impacts par WOW.")
